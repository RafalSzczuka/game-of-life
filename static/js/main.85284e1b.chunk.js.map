{"version":3,"sources":["config/config.js","components/Grid.js","components/StartBtn.js","components/RandomSeedBtn.js","utils/utils.js","App.js","index.js"],"names":["operations","Grid","grid","gridSetter","className","style","display","gridTemplateColumns","map","rows","i","col","k","key","onClick","newGrid","produce","gridCopy","backgroundColor","undefined","StartBtn","handler","state","RandomSeedBtn","setter","generator","generateGrid","push","j","generateRandomLife","Math","random","App","useState","setGrid","running","setRunning","runningRef","useRef","current","handleStartBtn","runSimulation","originGrid","draftGrid","neighbours","forEach","x","y","newI","newJ","setTimeout","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.85284e1b.chunk.js","sourcesContent":["const size = 30;\r\n\r\nconst operations = [\r\n  [0, 1],\r\n  [0, -1],\r\n  [1, -1],\r\n  [-1, 1],\r\n  [1, 1],\r\n  [-1, -1],\r\n  [1, 0],\r\n  [-1, 0],\r\n];\r\n\r\nconst interval = 100;\r\n\r\n// lower ratio === more alive cells at the beginning\r\nconst randomSeedRatio = 0.8;\r\n\r\nexport { size, operations, interval, randomSeedRatio };\r\n","import React from \"react\";\r\nimport produce from \"immer\";\r\nimport { size } from \"../config/config\";\r\n\r\nconst Grid = ({ grid, gridSetter }) => {\r\n  return (\r\n    <div\r\n      className=\"grid\"\r\n      style={{\r\n        display: \"grid\",\r\n        gridTemplateColumns: `repeat(${size}, 20px)`,\r\n      }}\r\n    >\r\n      {grid.map((rows, i) =>\r\n        rows.map((col, k) => (\r\n          <div\r\n            className=\"cell\"\r\n            key={`${i}-${k}`}\r\n            onClick={() => {\r\n              const newGrid = produce(grid, (gridCopy) => {\r\n                gridCopy[i][k] = grid[i][k] ? 0 : 1;\r\n              });\r\n              gridSetter(newGrid);\r\n            }}\r\n            style={{\r\n              backgroundColor: grid[i][k] ? \"lightgreen\" : undefined,\r\n            }}\r\n          ></div>\r\n        ))\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Grid;\r\n","import React from \"react\";\r\n\r\nconst StartBtn = ({ handler, state }) => {\r\n  return (\r\n    <button\r\n      className={state ? \"startBtn active\" : \"startBtn\"}\r\n      onClick={handler}\r\n    >\r\n      {state ? \"pause\" : \"start\"}\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default StartBtn;\r\n","import React from \"react\";\r\n\r\nconst RandomSeedBtn = ({ setter, generator }) => {\r\n  return (\r\n    <button\r\n      className=\"randomBtn\"\r\n      onClick={() => {\r\n        setter(generator);\r\n      }}\r\n    >\r\n      Random seed\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default RandomSeedBtn;\r\n","import { size, randomSeedRatio } from \"../config/config\";\r\n\r\nconst generateGrid = () => {\r\n  const grid = [];\r\n  for (let i = 0; i < size; i++) {\r\n    grid.push([]);\r\n    for (let j = 0; j < size; j++) {\r\n      grid[i].push(0);\r\n    }\r\n  }\r\n  return grid;\r\n};\r\n\r\nconst generateRandomLife = () => {\r\n  const grid = [];\r\n  for (let i = 0; i < size; i++) {\r\n    grid.push([]);\r\n    for (let j = 0; j < size; j++) {\r\n      grid[i].push(Math.random() > randomSeedRatio ? 1 : 0);\r\n    }\r\n  }\r\n  return grid;\r\n};\r\n\r\nexport { generateGrid, generateRandomLife };\r\n","import React, { useState, useRef } from \"react\";\nimport produce from \"immer\";\nimport \"./App.css\";\nimport Grid from \"./components/Grid\";\nimport StartBtn from \"./components/StartBtn\";\nimport RandomSeedBtn from \"./components/RandomSeedBtn\";\nimport { interval, operations, size } from \"./config/config\";\nimport { generateGrid, generateRandomLife } from \"./utils/utils\";\n\nfunction App() {\n  const [grid, setGrid] = useState(() => {\n    return generateGrid();\n  });\n\n  const [running, setRunning] = useState(false);\n\n  const runningRef = useRef();\n  runningRef.current = running;\n\n  const runSimulation = () => {\n    if (!runningRef.current) {\n      return;\n    }\n\n    setGrid((originGrid) => {\n      return produce(originGrid, (draftGrid) => {\n        for (let i = 0; i < size; i++) {\n          for (let j = 0; j < size; j++) {\n            let neighbours = 0;\n\n            // check every possible neighbour cell\n            operations.forEach(([x, y]) => {\n              const newI = i + x;\n              const newJ = j + y;\n\n              // check grid boundaries reach\n              if (newI >= 0 && newI < size && newJ >= 0 && newJ < size) {\n                neighbours += originGrid[newI][newJ];\n              }\n            });\n\n            // check neighbours conditions (alive / dead (1 / 0))\n            if (neighbours < 2 || neighbours > 3) {\n              draftGrid[i][j] = 0;\n            } else if (originGrid[i][j] === 0 && neighbours === 3) {\n              draftGrid[i][j] = 1;\n            }\n          }\n        }\n      });\n    });\n\n    setTimeout(runSimulation, interval);\n  };\n\n  const handleStartBtn = () => {\n    setRunning(!running);\n    if (!running) {\n      runningRef.current = true;\n      runSimulation();\n    }\n  };\n\n  return (\n    <>\n      <div className=\"container\">\n        <div className=\"buttons\">\n          <StartBtn handler={() => handleStartBtn()} state={running} />\n          <div className=\"secondary\">\n            <RandomSeedBtn setter={setGrid} generator={generateRandomLife} />\n            <button\n              className=\"clearBtn\"\n              onClick={() => {\n                setRunning(false);\n                setGrid(generateGrid());\n              }}\n            >\n              Clear\n            </button>\n          </div>\n        </div>\n        <Grid grid={grid} gridSetter={setGrid} />\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}